#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YazilimdanAnlamayanMuhendis.wwwroot.mail
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class mailTemp : mailTempBase
{

#line hidden

public override void Execute()
{
WriteLiteral("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional //EN\" \"http://www.w3.or" +
"g/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html");

WriteLiteral(" xmlns=\"http://www.w3.org/1999/xhtml\"");

WriteLiteral(" xmlns:v=\"urn:schemas-microsoft-com:vml\"");

WriteLiteral(" xmlns:o=\"urn:schemas-microsoft-com:office:office\"");

WriteLiteral(">\n<head>\n    <meta");

WriteLiteral(" http-equiv=\"Content-Type\"");

WriteLiteral(" content=\"text/html; charset=UTF-8\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"viewport\"");

WriteLiteral(" content=\"width=device-width, initial-scale=1.0\"");

WriteLiteral(">\n    <meta");

WriteLiteral(" name=\"x-apple-disable-message-reformatting\"");

WriteLiteral(">\n    <!--[if !mso]><!-->\n    <meta");

WriteLiteral(" http-equiv=\"X-UA-Compatible\"");

WriteLiteral(" content=\"IE=edge\"");

WriteLiteral("><!--<![endif]-->\n    <title></title>\n\n    <style");

WriteLiteral(" type=\"text/css\"");

WriteLiteral(">\n        table, td {\n            color: #000000;\n        }\n\n        a {\n        " +
"    color: #0000ee;\n            text-decoration: underline;\n        }\n\n");

WriteLiteral("        ");


#line 21 "mailTemp.txt"
   Write(media);


#line default
#line hidden
WriteLiteral(@" only screen and (min-width: 520px) {
            .u-row {
                width: 500px !important;
            }

                .u-row .u-col {
                    vertical-align: top;
                }

                .u-row .u-col-100 {
                    width: 500px !important;
                }
        }

");

WriteLiteral("        ");


#line 35 "mailTemp.txt"
   Write(media);


#line default
#line hidden
WriteLiteral(@" (max-width: 520px) {
            .u-row-container {
                max-width: 100% !important;
                padding-left: 0px !important;
                padding-right: 0px !important;
            }

            .u-row .u-col {
                min-width: 320px !important;
                max-width: 100% !important;
                display: block !important;
            }

            .u-row {
                width: calc(100% - 40px) !important;
            }

            .u-col {
                width: 100% !important;
            }

                .u-col > div {
                    margin: 0 auto;
                }
        }

        body {
            margin: 0;
            padding: 0;
        }

        table,
        tr,
        td {
            vertical-align: top;
            border-collapse: collapse;
        }

        p {
            margin: 0;
        }

        .ie-container table,
        .mso-container table {
            table-layout: fixed;
        }

        * {
            line-height: inherit;
        }

        a[x-apple-data-detectors='true'] {
            color: inherit !important;
            text-decoration: none !important;
        }
    </style>



</head>

<body");

WriteLiteral(" class=\"clean-body u_body\"");

WriteLiteral(" style=\"margin: 0;padding: 0;-webkit-text-size-adjust: 100%;background-color: #e7" +
"e7e7;color: #000000\"");

WriteLiteral(">\n    <table");

WriteLiteral(" style=\"border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table" +
"-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;min-width: 320px;Margin: " +
"0 auto;background-color: #e7e7e7;width:100%\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(">\n        <tbody>\n            <tr");

WriteLiteral(" style=\"vertical-align: top\"");

WriteLiteral(">\n                <td");

WriteLiteral(" style=\"word-break: break-word;border-collapse: collapse !important;vertical-alig" +
"n: top\"");

WriteLiteral(">\n\n\n                    <div");

WriteLiteral(" class=\"u-row-container\"");

WriteLiteral(" style=\"padding: 0px;background-color: transparent\"");

WriteLiteral(">\n                        <div");

WriteLiteral(" class=\"u-row\"");

WriteLiteral(" style=\"Margin: 0 auto;min-width: 320px;max-width: 500px;overflow-wrap: break-wor" +
"d;word-wrap: break-word;word-break: break-word;background-color: transparent;\"");

WriteLiteral(">\n                            <div");

WriteLiteral(" style=\"border-collapse: collapse;display: table;width: 100%;background-color: tr" +
"ansparent;\"");

WriteLiteral(">\n\n                                <div");

WriteLiteral(" class=\"u-col u-col-100\"");

WriteLiteral(" style=\"max-width: 320px;min-width: 500px;display: table-cell;vertical-align: top" +
";\"");

WriteLiteral(">\n                                    <div");

WriteLiteral(" style=\"width: 100% !important;\"");

WriteLiteral(">\n                                        <div");

WriteLiteral(" style=\"padding: 0px;border-top: 0px solid transparent;border-left: 0px solid tra" +
"nsparent;border-right: 0px solid transparent;border-bottom: 0px solid transparen" +
"t;\"");

WriteLiteral(">\n\n\n                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <div");

WriteLiteral(" class=\"menu\"");

WriteLiteral(" style=\"text-align:center\"");

WriteLiteral(@">
                                                            </div>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <h1");

WriteLiteral(" style=\"margin: 0px; line-height: 140%; text-align: center; word-wrap: break-word" +
"; font-weight: normal; font-family: arial,helvetica,sans-serif; font-size: 22px;" +
"\"");

WriteLiteral(@">
                                                                Kodcamp
                                                            </h1>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <table");

WriteLiteral(" height=\"0px\"");

WriteLiteral(" align=\"center\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" style=\"border-collapse: collapse;table-layout: fixed;border-spacing: 0;mso-table" +
"-lspace: 0pt;mso-table-rspace: 0pt;vertical-align: top;border-top: 1px solid #BB" +
"BBBB;-ms-text-size-adjust: 100%;-webkit-text-size-adjust: 100%\"");

WriteLiteral(">\n                                                                <tbody>\n       " +
"                                                             <tr");

WriteLiteral(" style=\"vertical-align: top\"");

WriteLiteral(">\n                                                                        <td");

WriteLiteral(" style=\"word-break: break-word;border-collapse: collapse !important;vertical-alig" +
"n: top;font-size: 0px;line-height: 0px;mso-line-height-rule: exactly;-ms-text-si" +
"ze-adjust: 100%;-webkit-text-size-adjust: 100%\"");

WriteLiteral(@">
                                                                            <span>&#160;</span>
                                                                        </td>
                                                                    </tr>
                                                                </tbody>
                                                            </table>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(@">

                                                            <div>
                                                                <strong> İsim <br> xxxNamexxx </strong> <br>
                                                                <strong> Mail <br> xxxMailxxx </strong> <br>
                                                                <strong> Başlık <br> xxxTitlexxx </strong> <br>
                                                                <strong> Mesaj <br> xxxTextxxx </strong> <br>


                                                            </div>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <div");

WriteLiteral(" align=\"center\"");

WriteLiteral(">\n                                                                <a");

WriteLiteral(" href=\"https://kodcamp.com/\"");

WriteLiteral(" target=\"_blank\"");

WriteLiteral(@" style=""box-sizing: border-box;display: inline-block;font-family:arial,helvetica,sans-serif;text-decoration: none;-webkit-text-size-adjust: none;text-align: center;color: #FFFFFF; background-color: #3AAEE0; border-radius: 4px;-webkit-border-radius: 4px; -moz-border-radius: 4px; width:auto; max-width:100%; overflow-wrap: break-word; word-break: break-word; word-wrap:break-word; mso-border-alt: none;""");

WriteLiteral(">\n                                                                    <span");

WriteLiteral(" style=\"display:block;padding:10px 20px;line-height:120%;\"");

WriteLiteral("><span");

WriteLiteral(" style=\"font-size: 14px; line-height: 16.8px;\"");

WriteLiteral(@">Siteye Git</span></span>
                                                                </a>
                                                            </div>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <div");

WriteLiteral(" style=\"line-height: 140%; text-align: left; word-wrap: break-word;\"");

WriteLiteral(">\n                                                                <p");

WriteLiteral(" style=\"font-size: 14px; line-height: 140%;\"");

WriteLiteral(@">Bizimle iletişime ge&ccedil;ebilirsiniz.</p>
                                                            </div>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>

                                            <table");

WriteLiteral(" style=\"font-family:arial,helvetica,sans-serif;\"");

WriteLiteral(" role=\"presentation\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                <tbody>\n                       " +
"                             <tr>\n                                              " +
"          <td");

WriteLiteral(" style=\"overflow-wrap:break-word;word-break:break-word;padding:10px;font-family:a" +
"rial,helvetica,sans-serif;\"");

WriteLiteral(" align=\"left\"");

WriteLiteral(">\n\n                                                            <table");

WriteLiteral(" width=\"100%\"");

WriteLiteral(" cellpadding=\"0\"");

WriteLiteral(" cellspacing=\"0\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(">\n                                                                <tr>\n          " +
"                                                          <td");

WriteLiteral(" style=\"padding-right: 0px;padding-left: 0px;\"");

WriteLiteral(" align=\"center\"");

WriteLiteral(">\n\n                                                                        <img");

WriteLiteral(" align=\"center\"");

WriteLiteral(" border=\"0\"");

WriteLiteral(" src=\"https://kodcamp.com/mail/images/image-1.png\"");

WriteLiteral(" alt=\"\"");

WriteLiteral(" title=\"\"");

WriteLiteral(" style=\"outline: none;text-decoration: none;-ms-interpolation-mode: bicubic;clear" +
": both;display: inline-block !important;border: none;height: auto;float: none;wi" +
"dth: 100%;max-width: 480px;\"");

WriteLiteral(" width=\"480\"");

WriteLiteral(@" />

                                                                    </td>
                                                                </tr>
                                                            </table>

                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                </td>
            </tr>
        </tbody>
    </table>
</body>
</html>
");

}
}

// NOTE: this is the default generated helper class. You may choose to extract it to a separate file 
// in order to customize it or share it between multiple templates, and specify the template's base 
// class via the @inherits directive.
public abstract class mailTempBase
{

		// This field is OPTIONAL, but used by the default implementation of Generate, Write, WriteAttribute and WriteLiteral
		//
		System.IO.TextWriter __razor_writer;

		// This method is OPTIONAL
		//
		/// <summary>Executes the template and returns the output as a string.</summary>
		/// <returns>The template output.</returns>
		public string GenerateString ()
		{
			using (var sw = new System.IO.StringWriter ()) {
				Generate (sw);
				return sw.ToString ();
			}
		}

		// This method is OPTIONAL, you may choose to implement Write and WriteLiteral without use of __razor_writer
		// and provide another means of invoking Execute.
		//
		/// <summary>Executes the template, writing to the provided text writer.</summary>
		/// <param name="writer">The TextWriter to which to write the template output.</param>
		public void Generate (System.IO.TextWriter writer)
		{
			__razor_writer = writer;
			Execute ();
			__razor_writer = null;
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the template output without HTML escaping it.</summary>
		/// <param name="value">The literal value.</param>
		protected void WriteLiteral (string value)
		{
			__razor_writer.Write (value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes a literal value to the TextWriter without HTML escaping it.</summary>
		/// <param name="writer">The TextWriter to which to write the literal.</param>
		/// <param name="value">The literal value.</param>
		protected static void WriteLiteralTo (System.IO.TextWriter writer, string value)
		{
			writer.Write (value);
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>Writes a value to the template output, HTML escaping it if necessary.</summary>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected void Write (object value)
		{
			WriteTo (__razor_writer, value);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>Writes an object value to the TextWriter, HTML escaping it if necessary.</summary>
		/// <param name="writer">The TextWriter to which to write the value.</param>
		/// <param name="value">The value.</param>
		/// <remarks>The value may be a Action<System.IO.TextWriter>, as returned by Razor helpers.</remarks>
		protected static void WriteTo (System.IO.TextWriter writer, object value)
		{
			if (value == null)
				return;

			var write = value as Action<System.IO.TextWriter>;
			if (write != null) {
				write (writer);
				return;
			}

			//NOTE: a more sophisticated implementation would write safe and pre-escaped values directly to the
			//instead of double-escaping. See System.Web.IHtmlString in ASP.NET 4.0 for an example of this.
			writer.Write(System.Net.WebUtility.HtmlEncode (value.ToString ()));
		}

		// This method is REQUIRED, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to the template output.
		/// </summary>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		protected void WriteAttribute (string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			WriteAttributeTo (__razor_writer, name, prefix, suffix, values);
		}

		// This method is REQUIRED if the template contains any Razor helpers, but you may choose to implement it differently
		//
		/// <summary>
		/// Conditionally writes an attribute to a TextWriter.
		/// </summary>
		/// <param name="writer">The TextWriter to which to write the attribute.</param>
		/// <param name="name">The name of the attribute.</param>
		/// <param name="prefix">The prefix of the attribute.</param>
		/// <param name="suffix">The suffix of the attribute.</param>
		/// <param name="values">Attribute values, each specifying a prefix, value and whether it's a literal.</param>
		///<remarks>Used by Razor helpers to write attributes.</remarks>
		protected static void WriteAttributeTo (System.IO.TextWriter writer, string name, string prefix, string suffix, params Tuple<string,object,bool>[] values)
		{
			// this is based on System.Web.WebPages.WebPageExecutingBase
			// Copyright (c) Microsoft Open Technologies, Inc.
			// Licensed under the Apache License, Version 2.0
			if (values.Length == 0) {
				// Explicitly empty attribute, so write the prefix and suffix
				writer.Write (prefix);
				writer.Write (suffix);
				return;
			}

			bool first = true;
			bool wroteSomething = false;

			for (int i = 0; i < values.Length; i++) {
				Tuple<string,object,bool> attrVal = values [i];
				string attPrefix = attrVal.Item1;
				object value = attrVal.Item2;
				bool isLiteral = attrVal.Item3;

				if (value == null) {
					// Nothing to write
					continue;
				}

				// The special cases here are that the value we're writing might already be a string, or that the 
				// value might be a bool. If the value is the bool 'true' we want to write the attribute name instead
				// of the string 'true'. If the value is the bool 'false' we don't want to write anything.
				//
				// Otherwise the value is another object (perhaps an IHtmlString), and we'll ask it to format itself.
				string stringValue;
				bool? boolValue = value as bool?;
				if (boolValue == true) {
					stringValue = name;
				} else if (boolValue == false) {
					continue;
				} else {
					stringValue = value as string;
				}

				if (first) {
					writer.Write (prefix);
					first = false;
				} else {
					writer.Write (attPrefix);
				}

				if (isLiteral) {
					writer.Write (stringValue ?? value);
				} else {
					WriteTo (writer, stringValue ?? value);
				}
				wroteSomething = true;
			}
			if (wroteSomething) {
				writer.Write (suffix);
			}
		}
		// This method is REQUIRED. The generated Razor subclass will override it with the generated code.
		//
		///<summary>Executes the template, writing output to the Write and WriteLiteral methods.</summary>.
		///<remarks>Not intended to be called directly. Call the Generate method instead.</remarks>
		public abstract void Execute ();

}
}
#pragma warning restore 1591
